Bootstrap: docker
From: ubuntu:18.04

%labels
Maintainer  code_aster team http://www.code-aster.org
Version 20190513

%help
This container provides prerequisites to build sequential and parallel versions
of code_aster (from 'default' branch).


Using the image to build code_aster development version:

- Start a shell in the container environment:

    singularity shell <path-to-this-image>

- Clone 'src' repository, usually as ${HOME}/dev/codeaster/src:

    mkdir -p ${HOME}/dev/codeaster
    cd ${HOME}/dev/codeaster
    hg clone https://bitbucket.org/code_aster/codeaster-src src

- Configure using provided configuration files. For sequential build:

    cd ${HOME}/dev/codeaster/src
    ./waf configure --use-config-dir=/scif/apps/wafcfg --use-config=scif_std \
        --singularity-image <path-to-this-image>

    The '--singularity-image' tells that code_aster will be executed through
    this Singularity image.

- For parallel build, use '--use-config=scif_mpi' instead of '--use-config=scif_std':

    ln -s waf_variant waf_mpi
    ./waf_mpi configure --use-config-dir=/scif/apps/wafcfg --use-config=scif_mpi \
        --singularity-image <path-to-this-image>

- Install:

    ./waf install
    # or
    ./waf_mpi install


%environment
export LANG=en_US.UTF-8 LC_MESSAGES=POSIX
export DEVTOOLS_COMPUTER_ID=scif
export LD_LIBRARY_PATH=/scif/apps/tfel/lib
export PYTHONPATH=/scif/apps/asrun/lib/python3.6/site-packages:/scif/apps/tfel/lib/python3.6/site-packages

%post
export LANG=en_US.UTF-8 LC_MESSAGES=POSIX
apt-get update -y
apt-get upgrade -y --with-new-pkgs -o Dpkg::Options::="--force-confold"
apt-get install -y \
    cmake \
    g++ \
    gcc \
    gfortran \
    locales \
    make \
    mercurial \
    wget \
    zlib1g-dev \
    python3-dev \
    bison \
    flex \
    zlib1g-dev \
    libopenblas-dev \
    python3-dev \
    python3-numpy \
    libboost-numpy-dev \
    libboost-python-dev \
    libopenmpi-dev \
    libblacs-mpi-dev \
    libscalapack-openmpi-dev \
    gdb \
    tk \
    xterm \
    gmsh \
    grace

locale-gen en_GB.UTF-8 en_US.UTF-8 fr_FR.UTF-8
update-locale LANG=en_US.UTF-8 LC_MESSAGES=POSIX
mkdir -p ${SINGULARITY_ROOTFS}/data

# hdf5
%appinstall hdf5
cd ${SINGULARITY_ROOTFS}/data
rm -rf hdf5
mkdir hdf5
wget --no-check-certificate --quiet \
    https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.3/src/hdf5-1.10.3.tar.gz \
    -O hdf.tar.gz
tar xf hdf.tar.gz -C hdf5 --strip-components 1
cd hdf5
./configure --prefix=/scif/apps/hdf5
make -j 4
make install

# med
%appinstall med
cd ${SINGULARITY_ROOTFS}/data
rm -rf med
mkdir med
wget --no-check-certificate --quiet \
    http://files.salome-platform.org/Salome/other/med-4.0.0.tar.gz \
    -O med.tar.gz
tar xf med.tar.gz -C med --strip-components 1
cd med
alias python=python3
F77=gfortran CXXFLAGS='-std=gnu++98' PYTHON=/usr/bin/python3 \
    ./configure --disable-mesgerr --with-hdf5=/scif/apps/hdf5 --prefix=/scif/apps/med
make -j 4
make install

# metis
%appinstall metis
cd ${SINGULARITY_ROOTFS}/data
rm -rf metis
hg clone --noupdate https://bitbucket.org/code_aster/metis metis
cd metis
hg update code_aster
make config prefix=/scif/apps/metis
make -j 4
make install

# parmetis
%appinstall parmetis
cd ${SINGULARITY_ROOTFS}/data
rm -rf parmetis
hg clone --noupdate https://bitbucket.org/code_aster/parmetis
cd parmetis
hg update parmetis_aster
make config CFLAGS="-fPIC -DINTSIZE64" prefix=/scif/apps/parmetis
make -j 4
make install

# tfel
%appinstall tfel
cd ${SINGULARITY_ROOTFS}/data
rm -rf tfel
mkdir tfel
VERSION=3.2.1
wget --no-check-certificate --quiet \
    https://github.com/thelfer/tfel/archive/TFEL-${VERSION}.tar.gz \
    -O tfel.tar.gz
tar xf tfel.tar.gz -C tfel --strip-components 1
cd tfel
mkdir build
cd build
cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DTFEL_SVN_REVISION=${VERSION} -DTFEL_APPEND_VERSION=${VERSION} \
    -DCMAKE_Fortran_COMPILER=/usr/bin/gfortran \
    -Dlocal-castem-header=ON -Denable-fortran=OFF \
    -Denable-broken-boost-python-module-visibility-handling=ON \
    -Denable-python-bindings=ON \
    -Denable-cyrano=ON -Denable-aster=ON \
    -Ddisable-reference-doc=ON -Ddisable-website=ON \
    -Denable-portable-build=ON \
    -DPython_ADDITIONAL_VERSIONS=3.6 -Denable-python=ON \
    -DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python3 \
    -DPYTHON_LIBRARY:FILEPATH=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/libpython3.6.so \
    -DPYTHON_INCLUDE_DIR:PATH=/usr/include/python3.6 \
    -DCMAKE_INSTALL_PREFIX=/scif/apps/tfel
make -j 4
make install
ln -s /scif/apps/tfel/bin/mfront-${VERSION} /usr/local/bin/

# homard
%appinstall homard
cd ${SINGULARITY_ROOTFS}/data
rm -rf homard
mkdir homard
wget --no-check-certificate --quiet \
    https://bitbucket.org/code_aster/homard/get/homard_aster.tar.gz \
    -O homard.tar.gz
tar xf homard.tar.gz -C homard --strip-components 1
cd homard
export LANG=en_US.UTF-8 LC_MESSAGES=POSIX
python3 setup_homard.py --prefix=/scif/apps/homard
ln -s /scif/apps/homard/homard /usr/local/bin/

# asrun (graphical packages should be removed for servers)
%appinstall asrun
cd ${SINGULARITY_ROOTFS}/data
rm -rf asrun
mkdir asrun
wget --no-check-certificate --quiet \
    https://bitbucket.org/code_aster/codeaster-frontend/get/default.tar.gz \
    -O asrun.tar.gz
tar xf asrun.tar.gz -C asrun --strip-components 1
cd asrun
cat << EOF > external_configuration.py
parameters = {
    "ASTER_VERSION": "unstable",
    "MPIRUN": "mpirun -np %(mpi_nbcpu)s --hostfile %(mpi_hostfile)s %(program)s",
    "DEBUGGER_COMMAND": "/usr/bin/gdb --command=@D @E",
    "DEBUGGER_COMMAND_POST": "/usr/bin/gdb -batch --command=@D @E @C",
    "NODE": "localhost",
    "PS_COMMAND_CPU": "/bin/ps -e --width=512 -ocputime -ocommand",
    "PS_COMMAND_PID": "/bin/ps -e --width=512 -opid -ocommand",
    "TERMINAL": "/usr/bin/xterm",
}
EOF
python3 setup.py install --prefix=/scif/apps/asrun
sed -i "s/mpi_get_procid_cmd : echo \$PMI_RANK/mpi_get_procid_cmd : echo \$OMPI_COMM_WORLD_RANK/" /scif/apps/asrun/etc/codeaster/asrun
printf "\nvers : unstable:/scif/apps/aster/share/aster\n" >> /scif/apps/asrun/etc/codeaster/aster
ln -s /scif/apps/asrun/bin/as_run /usr/local/bin/

# scotch sequential
%appinstall scotch-seq
cd ${SINGULARITY_ROOTFS}/data
rm -rf scotch-seq
hg clone --noupdate https://bitbucket.org/code_aster/scotch scotch-seq
cd scotch-seq
hg update scotch_aster
cd src
sed -i -e 's/CFLAGS\s*=/CFLAGS = -Wl,--no-as-needed/g' \
    -e 's/CCD\s*=.*$/CCD = cc/g' Makefile.inc
make scotch
make esmumps
mkdir -p /scif/apps/scotch-seq
make install prefix=/scif/apps/scotch-seq

# scotch parallel
%appinstall scotch-mpi
cd ${SINGULARITY_ROOTFS}/data
rm -rf scotch-mpi
hg clone --noupdate https://bitbucket.org/code_aster/scotch scotch-mpi
cd scotch-mpi
hg update scotch_aster
cd src
sed -i -e 's/CFLAGS\s*=/CFLAGS = -Wl,--no-as-needed/g' \
    -e 's/CCD\s*=.*$/CCD = mpicc/g' Makefile.inc
make scotch
make ptscotch
make esmumps
mkdir -p /scif/apps/scotch-mpi
make install prefix=/scif/apps/scotch-mpi

# mumps sequential
%appinstall mumps-seq
cd ${SINGULARITY_ROOTFS}/data
rm -rf mumps-seq
hg clone --noupdate https://bitbucket.org/code_aster/mumps mumps-seq
cd mumps-seq
hg update for_aster
LIBPATH="/scif/apps/scotch-seq/lib /scif/apps/metis/lib /scif/apps/parmetis/lib" \
    INCLUDES="/scif/apps/scotch-seq/include /scif/apps/metis/include /scif/apps/parmetis/include" \
    python3 ./waf configure --enable-openmp --enable-metis --enable-scotch \
        --install-tests --prefix=/scif/apps/mumps-seq
python3 ./waf build --jobs=1
python3 ./waf install --jobs=1

# mumps parallel
%appinstall mumps-mpi
cd ${SINGULARITY_ROOTFS}/data
rm -rf mumps-mpi
hg clone --noupdate https://bitbucket.org/code_aster/mumps mumps-mpi
cd mumps-mpi
hg update for_aster
LIBPATH="/scif/apps/scotch-mpi/lib /scif/apps/metis/lib /scif/apps/parmetis/lib" \
    INCLUDES="/scif/apps/scotch-mpi/include /scif/apps/metis/include /scif/apps/parmetis/include" \
    python3 ./waf configure --enable-mpi --enable-openmp --enable-metis --enable-parmetis --enable-scotch \
        --install-tests --prefix=/scif/apps/mumps-mpi
python3 ./waf build --jobs=1
python3 ./waf install --jobs=1

# petsc
%appinstall petsc
cd ${SINGULARITY_ROOTFS}/data
rm -rf petsc
hg clone --noupdate https://bitbucket.org/code_aster/petsc
cd petsc
hg update petsc_aster
cd petsc-src
./configure \
    --with-debugging=0 \
    --with-mpi=1 \
    --with-ssl=0 \
    --with-x=0 \
    --with-mumps-lib="-L/scif/apps/mumps-mpi/lib -lzmumps -ldmumps -lmumps_common -lpord -L/scif/apps/scotch-mpi/lib -lesmumps -lptscotch -lptscotcherr -lptscotcherrexit -lscotch -lscotcherr -lscotcherrexit -L/scif/apps/parmetis/lib -lparmetis -L/scif/apps/metis/lib -lmetis" \
    --with-mumps-include=/scif/apps/mumps-mpi/include \
    --with-blas-lapack-lib="-lopenblas -llapack -lblacsCinit-openmpi -lblacsF77init-openmpi -lblacs-openmpi" \
    --with-scalapack-lib="-lscalapack-openmpi" \
    --PETSC_ARCH=arch-linux2-codeaster \
    --download-ml=${SINGULARITY_ROOTFS}/data/petsc/3rd/petsc-pkg-ml-e5040d11aa07.tar.gz \
    --download-hypre=${SINGULARITY_ROOTFS}/data/petsc/3rd/hypre-2.14.0.tar.gz \
    --download-superlu=${SINGULARITY_ROOTFS}/data/petsc/3rd/superlu-a0819410c9eb779f9b296cdd95fbdfd96986ae10.tar.gz \
    --with-openmp=0 \
    LIBS=-lgomp \
    --prefix=/scif/apps/petsc
make -j 4 PETSC_DIR=${SINGULARITY_ROOTFS}/data/petsc/petsc-src PETSC_ARCH=arch-linux2-codeaster all
make -j 4 PETSC_DIR=${SINGULARITY_ROOTFS}/data/petsc/petsc-src PETSC_ARCH=arch-linux2-codeaster install

# clean source directory
apt-get clean
rm -rf /var/lib/apt/lists/* /var/tmp/*
rm -rf ${SINGULARITY_ROOTFS}/data

# aster
%appinstall wafcfg
cat << EOFstd > /scif/apps/wafcfg/scif_std.py
def configure(self):
    opts = self.options

    # self.env.append_value('CXXFLAGS', ['-D_GLIBCXX_USE_CXX11_ABI=0'])
    self.env['ADDMEM'] = 600

    self.env['TFELHOME'] = '/scif/apps/tfel'
    self.env['TFELVERS'] = '3.2.1'
    self.env['CATALO_CMD'] = "DUMMY="

    self.env.append_value('LIBPATH', [
        '/scif/apps/hdf5/lib',
        '/scif/apps/med/lib',
        '/scif/apps/metis/lib',
        '/scif/apps/mumps-seq/lib',
        '/scif/apps/scotch-seq/lib',
        '/scif/apps/tfel/lib',
    ])

    self.env.append_value('INCLUDES', [
        '/scif/apps/hdf5/include',
        '/scif/apps/med/include',
        '/scif/apps/metis/include',
        '/scif/apps/mumps-seq/include',
        '/scif/apps/mumps-seq/include_seq',
        '/scif/apps/scotch-seq/include',
        '/scif/apps/tfel/include',
    ])

    # to fail if not found
    opts.enable_hdf5 = True
    opts.enable_med = True
    opts.enable_metis = True
    opts.enable_mumps = True
    opts.enable_scotch = True
    opts.enable_mfront = True
EOFstd

cat << EOFmpi > /scif/apps/wafcfg/scif_mpi.py
import scif_std

def configure(self):
    opts = self.options
    opts.parallel = True

    scif_std.configure(self)

    self.env.prepend_value('LIBPATH', [
        '/scif/apps/mumps-mpi/lib',
        '/scif/apps/parmetis/lib',
        '/scif/apps/petsc/lib',
        '/scif/apps/scotch-mpi/lib',
    ])

    self.env.prepend_value('INCLUDES', [
        '/scif/apps/mumps-mpi/include',
        '/scif/apps/parmetis/include',
        '/scif/apps/petsc/include',
        '/scif/apps/scotch-mpi/include',
    ])

    # to fail if not found
    opts.enable_petsc = True
EOFmpi

cat << EOFboost > /scif/apps/wafcfg/scif_boost.py
def configure(self):
    self.env.INCLUDES_BOOST = '/usr/include'
    self.env.LIBPATH_BOOST = ['/usr/lib/x86_64-linux-gnu']
    self.env.LIB_BOOST = ['boost_python3']
EOFboost

%runscript
echo "Please use: singularity help <path-to-this-image>"
